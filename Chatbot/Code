import streamlit as st
from PyPDF2 import PdfReader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain_community.chat_models import ChatOpenAI
OPENAI_API_KEY = "My_OpenAPI_Key"

#Upload PDF files
st.header("My first Chatbot")
with st.sidebar:
    st.title("Your Documents")
    file = st.file_uploader(" Upload a PDf file and start asking questions",
type="pdf")

# Extract the text and break into chunks
if file is not None:
    pdf_reader = PdfReader(file)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()
        # st.write(text)

#Break it into chunks
    # setting rules for text splitting
    text_splitters = RecursiveCharacterTextSplitter(
        separators="\n",
        chunk_size=1000,
        chunk_overlap=150,
        length_function=len
    )

    chunks = text_splitters.split_text(text)
    # st.write(chunks)

    #generating Embeddings
    embeddings = OpenAIEmbeddings(openai_api_key=OPENAI_API_KEY)

    #vectore Store - Initializing FAISS DB - Facebook AI Semantic Search
    vectore_store = FAISS.from_texts(chunks, embeddings)

    #Get User Enter Question
    user_que = st.text_input("Type your Questions here")

    #do a similarity search
    if user_que:
        match = vectore_store.similarity_search(user_que)
        # st.write(match)
        llm = ChatOpenAI(
            openai_api_key = OPENAI_API_KEY,
            temperature = 0,
            max_tokens = 1000,
            model_name = "gpt-3.5-turbo"
        )
        chain = load_qa_chain(llm,chain_type="stuff")
        response = chain.run(input_documents=match, question=user_que)
        st.write(response)


